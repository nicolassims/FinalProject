{"version":3,"sources":["store.js","socket.js","api.js","Nav.js","Feed.js","Users/List.js","Users/New.js","twitterauth.js","App.js","reportWebVitals.js","index.js"],"names":["users","state","action","type","data","monsters","save_twitter","twitter","localStorage","setItem","JSON","stringify","restore_twitter","getItem","parse","removeItem","user_form","save_session","sess","session","Object","assign","time","Date","now","restore_session","error","store","createStore","combineReducers","reducer","socket","channel","users_cb","monsters_cb","update","st","updatemonsters","ch_connect","Socket","params","token","connect","on","join","receive","resp","console","log","set_token","opts","getState","headers","get_twitter_auth","api_get","then","dispatch","path","a","fetch","text","json","api_post","method","body","api_patch","fetch_users","update_user","user","id","update_monster","monster","LoginForm","useState","name","setName","pass","setPass","Form","onSubmit","ev","preventDefault","password","api_login","inline","Control","onChange","target","value","Button","variant","SessionInfo","onClick","leave","LoginOrInfo","Link","to","children","Nav","Item","exact","className","activeClassName","error_row","Row","Col","Alert","href","url","CreateMonster","nummonsters","reduce","acc","cost","Math","pow","food","choices","nickchoices","floor","random","length","nickname","power","location","user_id","create_monster","Post","Card","Title","title","prompt","NicknameMonster","Text","ChangeLocation","foodamount","round","FeedMonster","TweetForm","tweet","setTweet","api_tweet","alert","placeholder","cards","foodgain","sort","b","push","sqrt","find","monstore","rows","map","history","useHistory","pass1","pass2","setUser","field","p1","p2","u1","pass_msg","create_user","pick","Group","Label","disabled","getParameterByName","search","results","RegExp","exec","decodeURIComponent","replace","useLocation","oauth_token","oauth_verifier","req_token","verifier","func","set_monster_cb","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9850760.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\n\nfunction users(state = [], action) {\n    switch (action.type) {\n    case 'users/set':\n        return action.data;\n    default:\n        return state;\n    }\n}\n\nfunction monsters(state = [], action) {\n    switch(action.type) {\n        case 'monsters/set': return action.data;\n        default: return state;\n    }\n}\n\nfunction save_twitter(twitter) {\n    localStorage.setItem(\"twitter\", JSON.stringify(twitter));\n}\n\nfunction restore_twitter() {\n    let twitter = localStorage.getItem(\"twitter\");\n    if (!twitter) {\n        return null;\n    }\n    twitter = JSON.parse(twitter);\n    return twitter;\n}\n\nfunction twitter(state = restore_twitter(), action) {\n    switch(action.type) {\n        case 'twitter/set': \n            save_twitter(action.data);\n            return action.data;\n        case 'session/clear':\n            localStorage.removeItem(\"twitter\");\n            return null;\n        default: return state;\n    }\n}\n\nfunction user_form(state = {}, action) {\n    switch (action.type) {\n    case 'user_form/set':\n        return action.data;\n    default:\n        return state\n    }\n}\n\nfunction save_session(sess) {\n    let session = Object.assign({}, sess, {time: Date.now()});\n    localStorage.setItem(\"session\", JSON.stringify(session));\n}\n\nfunction restore_session() {\n    let session = localStorage.getItem(\"session\");\n    if (!session) {\n        return null;\n    }\n    session = JSON.parse(session);\n    let age = Date.now() - session.time;\n    let hours = 60 * 60 * 1000;\n    if (age < 24 * hours) {\n        return session;\n    } else {\n        return null;\n    }\n}\n\nfunction session(state = restore_session(), action) {\n    switch (action.type) {\n      case 'session/set': \n        save_session(action.data);\n        return action.data;\n      case 'session/clear': \n        localStorage.removeItem(\"session\");\n        return null;\n      default: return state;\n    }\n}\n\nfunction error(state = null, action) {\n    switch (action.type) {\n        case 'error/clear': return null;\n        case 'session/set': return null;\n        case 'error/set': return action.data;\n        default: return state;\n    }\n}\n\nfunction root_reducer(state, action) {\n    let reducer = combineReducers({\n        users, user_form, monsters, session, error, twitter\n    });\n    return reducer(state, action);\n}\n\nlet store = createStore(root_reducer);\nexport default store;","import {Socket} from \"phoenix\";\n\n// switch out hard-coded url to a config\nlet socket = null;\nlet channel = null;\n\nlet users_cb = null;\nlet monsters_cb = null;\n\nfunction update(st) {\n    let users = st.users;\n    users_cb(users);\n}\n\nfunction updatemonsters(st) {\n    let monsters = st.monsters;\n    monsters_cb(monsters);\n}\n\nexport function set_user_cb(func) {\n    users_cb = func;\n}\n\nexport function set_monster_cb(func) {\n    monsters_cb = func;\n}\n\nexport function ch_connect(session) {\n\n    socket = new Socket(\"ws://localhost:4000/socket\", {params: {token: session.token}});\n\n    socket.connect();\n\n    channel = socket.channel(\"game\", {token: session.token})\n    channel.on(\"update\", update);\n    channel.on(\"updatemonsters\", updatemonsters);\n    channel.join()\n        .receive(\"ok\", resp => { console.log(\"Authorized\", resp) })\n        .receive(\"error\", resp => { console.log(\"Unable to join\", resp) })\n}\n\nexport function ch_disconnect() {\n    if (channel) {\n        channel.leave();\n    }\n    channel = null;\n\n    console.log(\"Disconnecting\");\n}","import store from './store';\nimport { ch_connect } from './socket.js'\n\nfunction set_token(opts) {\n  let state = store.getState();\n  let token = state?.session?.token;\n\n  if (opts.headers) {\n      opts.headers['x-auth'] = token\n  }\n  else {\n      opts.headers = \n          {\n              'x-auth': token\n          };\n  }\n  \n  return opts;\n}\n\nexport function get_twitter_auth() {\n  api_get(\"/twitter\").then((data) => {\n    console.log(\"TWITTER AUTH PART 1\")\n    console.log(data);\n    store.dispatch({\n      type: \"twitter/set\",\n      data: data,\n    });\n  });\n}\n\nexport function api_pinauth(pin, token) {\n  return api_post(\"/twitter\", {pin, token});\n}\n\nexport function api_tokenauth(verifier, token) {\n  return api_post(\"/twitter\", {verifier, token}).then((data) => {\n    console.log(data);\n    if (data.error) {\n      alert(\"Authentication seems to have failed. Try again?\");\n    } else {\n      alert(\"Authentication succeeded!\");\n    }\n  });\n}\n\nexport function api_tweet(tweet) {\n  return api_post(\"/twitter\", {tweet})\n}\n\nexport async function api_get(path) {\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, set_token({}));\n  let resp = await text.json();\n  return resp.data;\n}\n\nasync function api_post(path, data) {\n  let opts = {\n    method: 'POST',\n    headers: { \n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  console.log(opts);\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, set_token(opts));\n  return await text.json();\n}\n\nasync function api_patch(path, data) {\n  let opts = {\n    method: 'PATCH',\n    headers: { \n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  };\n  console.log(opts);\n  let text = await fetch(\"http://localhost:4000/api/v1\" + path, set_token(opts));\n  return await text.json();\n}\n\nexport function create_user(user) {\n  return api_post(\"/users\", {user});\n}\n\nexport function create_monster(monster) {\n  return api_post(\"/monsters\", {monster});\n}\n\nexport function fetch_users() {\n  api_get(\"/users\").then((data) => store.dispatch({\n      type: 'users/set',\n      data: data,\n  }));\n}\n\nexport function update_user(user) {\n  return api_patch(\"/users/\" + user.id, {user});\n}\n\nexport function api_login(name, password) {\n  api_post(\"/session\", {name, password}).then((data) => {\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session\n      }\n      store.dispatch(action);\n    } else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error\n      };\n      store.dispatch(action);\n    }\n    if (data.session) {\n      ch_connect(data.session); // TODO: Move if needed?\n      get_twitter_auth();\n    }\n  });\n}\n\nexport function update_monster(monster) {\n  return api_patch(\"/monsters/\" + monster.id, {monster});\n}\n\nexport function fetch_monsters() {\n  api_get(\"/monsters\").then((data) => store.dispatch({\n      type: 'monsters/set',\n      data: data,\n  }));\n}\n\nexport function load_defaults() {\n  fetch_users();\n  fetch_monsters();\n}","\nimport { Nav, Row, Col, Form, Button, Alert } from 'react-bootstrap'\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\nimport { api_login } from './api';\nimport store from './store';\nimport { ch_disconnect } from './socket.js';\n\nfunction LoginForm() {\n  const [name, setName] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n\n  function on_submit(ev) {\n    ev.preventDefault();\n    api_login(name, pass);\n  }\n\n  return (\n    <Form onSubmit={on_submit} inline>\n      <Form.Control name=\"name\"\n                    type=\"text\"\n                    onChange={(ev) => setName(ev.target.value)}\n                    value={name} />\n      <Form.Control name=\"password\"\n                    type=\"password\"\n                    onChange={(ev) => setPass(ev.target.value)}\n                    value={pass} />    \n      <Button variant=\"primary\" type=\"submit\">\n        Login  \n      </Button>          \n    </Form>\n  );\n}\n\nfunction SessionInfo({session}) {\n  function logout(ev) {\n    ev.preventDefault();\n    store.dispatch({ type: 'session/clear'});\n    ch_disconnect();\n  }\n\n  return (\n    <p>\n      Logged in as {session.name}\n      <Button onClick={logout}>Logout</Button>\n    </p>\n  );\n}\n\nfunction LOI({session}) {\n  if (session) {\n    return (\n      <div>\n        <SessionInfo session={session} />\n      </div>\n    );\n  } else {\n    return <LoginForm />;\n  }\n}\n\nconst LoginOrInfo = connect(({session, twitter}) => ({session, twitter}))(LOI);\n\nfunction AppNav({error, twitter}) {\n  let error_row = null;\n\n  if (error) {\n    error_row = (\n      <Row>\n        <Col>\n          <Alert variant=\"danger\">{error}</Alert>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <Nav variant=\"pills\">\n            <Link to=\"/\">Feed</Link>\n            <Link to=\"/users\">Users</Link>\n          </Nav>\n        </Col>\n        <Col>\n          <Button href={twitter?.url}>Authorize Twitter</Button>\n        </Col>\n        <Col>\n          <LoginOrInfo />\n        </Col>\n      </Row>\n      { error_row }\n    </div>\n  );\n}\n\nfunction Link({to, children}) {\n\n  return (\n    <Nav.Item>\n      <NavLink to={to} exact \n        onClick={() => {store.dispatch({type: 'error/clear', data: null})}} \n        className=\"nav-link\" \n        activeClassName=\"active\">\n        {children}\n      </NavLink>\n    </Nav.Item>\n  );\n}\n\nexport default connect(({error, twitter}) => ({error, twitter}))(AppNav);","import { Row, Col, Card, Form, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\nimport { api_tweet, update_monster, update_user, create_monster } from './api';\n\nfunction ChangeLocation(monster) {\n  if (monster.location === 0) {\n    monster.location = 1;\n  } else {\n    monster.location = 0;\n  }\n  update_monster(monster);\n}\n\nfunction FeedMonster(monster) {\n  let foodamount = Math.round(monster.user.food / 10);\n  monster.user.food -= foodamount;\n  monster.power += foodamount;\n  update_user(monster.user);\n  update_monster(monster);\n}\n\nfunction CreateMonster(monsters, user) {\n  let nummonsters = monsters.reduce((acc, monster) => {\n    return monster.user.id === user.id ? acc + 1 : acc;\n  }, 0);\n  let cost = Math.pow(10, nummonsters) - 1;\n  if (user.food >= cost) {\n    let choices = ['Dragon', 'Medusa', 'Pikachu', 'Werewolf', 'Jerry', 'Creeper', 'Ghost', 'Demon', 'Mimic', 'Ooze', 'Skeleton'];\n    let randchoice = choices[Math.floor(Math.random() * choices.length)];\n\n    let nickchoices = ['Draco', 'Dusa', 'Sparky', 'Howler', 'Jerry', 'Ssboom', 'Boo', 'Satanael', 'Doopliss', 'Rimuru', 'Sans'];\n    let randnickchoice = nickchoices[Math.floor(Math.random() * nickchoices.length)];\n\n    let monster = {\n      name: randchoice,\n      nickname: randnickchoice, \n      power: 1,\n      location: 0,\n      user_id: user.id\n    }\n\n    user.food -= cost;\n    update_user(user);\n    create_monster(monster);\n  }\n}\n\nfunction NicknameMonster(monster) {\n  let nickname = prompt(\"What would you like to nickname this \" + monster.name + \"?\");\n  if (nickname != null) {\n    monster.nickname = nickname;\n    update_monster(monster);\n  }\n}\n\nfunction Post({monster}) {\n  let location = monster.location === 0 ? \"The Farm\" : \"The Wild\";\n  return (\n    <Col>\n      <Card className = \"card\">\n        <Card.Title title=\"Click to rename monster!\"\n          className=\"cardbody nickname\" \n          onClick={() => NicknameMonster(monster)}>\n          {monster.nickname}\n        </Card.Title>\n        <Card.Text className=\"cardbody\">\n          Species: {monster.name}<br />\n          Power: {monster.power}<br />\n          Location: {location}<br />\n        </Card.Text>\n        <Button onClick={() => ChangeLocation(monster) }>Switch Location</Button>\n        <Button onClick={() => FeedMonster(monster) }>Feed Monster</Button>\n      </Card>\n    </Col>\n  );\n}\n\nfunction TweetForm() {\n  const [tweet, setTweet] = useState(\"\");\n\n  function on_submit(ev) {\n    ev.preventDefault();\n\n    api_tweet(tweet === \"\" ? \"Join me in Monster Browser! Feed my monsters by liking this tweet!\" : tweet).then((resp) => {\n      if (resp.error) {\n        alert(\"Sorry, we've encountered an error while attempting to send your tweet. Try again?\");\n      } else {\n        alert(\"Tweet sent!\");\n      }\n    });\n  }\n\n  return (\n    <Row>\n      <Form onSubmit={on_submit} inline>\n        <Form.Control name=\"tweet\"\n                      className=\"longbox\"\n                      type=\"text\"\n                      onChange={(ev) => setTweet(ev.target.value)}\n                      placeholder=\"Join me in Monster Browser! Feed my monsters by liking this tweet!\"\n                      value={tweet} />   \n        <Button variant=\"primary\" type=\"submit\">\n          Tweet  \n        </Button>          \n      </Form>\n    </Row>\n  );\n}\n\nfunction Feed({monsters, users}) {\n  let sess = JSON.parse(localStorage.getItem(\"session\"));\n  let cards = null;\n  let foodgain = 0;\n  let nummonsters = 0;\n  if (sess != null && users.length !== 0) {\n    cards = monsters\n      .sort((a, b) => (a.power < b.power) ? 1 : -1)\n      .reduce((acc, monster) => {\n      if (monster.user.id === sess.user_id) {\n        acc.push(<Post monster={monster} key={monster.id} />);\n        foodgain += Math.round(Math.sqrt(monster.power));\n        nummonsters++;\n      }\n      return acc;\n    }, [])\n\n    let user = users.find(value => { return value.id === sess.user_id; });\n    let cost = Math.pow(10, nummonsters) - 1;\n    let monstore = <h5>{cost - user.food} until your next monster!</h5>;\n\n    if (user.food >= cost) {\n      monstore = <Button onClick={() => CreateMonster(monsters, user) }>Buy new monster!</Button>;\n    }\n\n    return (\n      <div>\n        <TweetForm />\n        <Row>\n          <h1>Food: { user.food }</h1>\n        </Row>\n        <Row>\n          <h4>Max food per second: { foodgain }</h4>\n        </Row>\n        <Row>\n          { cards }\n        </Row>\n        <Row>\n          <Col>\n            { monstore }\n          </Col>\n        </Row>\n      </div>\n    );\n  } else {\n    return (\n      <h1>Log into the game to access your homepage!</h1>\n    );\n  }\n}\n\nexport default connect(({monsters, users}) => ({monsters, users}))(Feed);","import { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nfunction UsersList({users}) {\n  let rows = users\n    .sort((a, b) => (a.food < b.food) ? 1 : -1)\n    .map((user) => (\n    <tr key={user.id}>\n      <td>{user.name}</td>\n      <td>{user.food}</td>\n    </tr>\n  ));\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <h2>List Users</h2>\n          <p>\n            <Link to=\"/users/new\">\n              New User\n            </Link>\n          </p>\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Food</th>\n              </tr>\n            </thead>\n            <tbody>\n              { rows }\n            </tbody>\n          </table>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nfunction state2props({users}) {\n  return { users };\n}\n\nexport default connect(state2props)(UsersList);","import { Row, Col, Form, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport pick from 'lodash/pick';\n\nimport store from '../store';\nimport { create_user, fetch_users } from '../api';\n\nfunction UsersNew({error}) {\n  let history = useHistory();\n  const [user, setUser] = useState({name: \"\", pass1: \"\", pass2: \"\"});\n\n  function check_pass(p1, p2) {\n    if (p1 !== p2) {\n      return \"Passwords don't match.\";\n    }\n\n    if (p1.length < 8) {\n      return \"Password too short.\";\n    }\n\n    return \"\";\n  }\n\n  function update(field, ev) {\n    let u1 = Object.assign({}, user);\n    u1[field] = ev.target.value;\n    u1.password = u1.pass1;\n    u1.pass_msg = check_pass(u1.pass1, u1.pass2);\n    setUser(u1);\n  }\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n    let data = pick(user, ['name', 'password']);\n    create_user(data).then((resp) => {\n      if (resp.error) {\n        store.dispatch({type: 'error/set', data: resp.error})\n      } else {\n        fetch_users();\n        history.push(\"/users\");\n      }\n    });\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <h2>New User</h2>\n          <Form onSubmit={onSubmit}>\n            <Form.Group>\n              <Form.Label>Name</Form.Label>\n              <Form.Control type=\"text\"\n                            onChange={(ev) => update(\"name\", ev)}\n                            value={user.name || \"\"} />\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Password</Form.Label>\n              <Form.Control type=\"password\"\n                            onChange={(ev) => update(\"pass1\", ev)}\n                            value={user.pass1 || \"\"} />\n              <p>{user.pass_msg}</p>\n            </Form.Group>\n            <Form.Group>\n              <Form.Label>Confirm Password</Form.Label>\n              <Form.Control type=\"password\"\n                            onChange={(ev) => update(\"pass2\", ev)}\n                            value={user.pass2 || \"\"} />\n            </Form.Group>\n            <Button variant=\"primary\"\n                    type=\"submit\"\n                    disabled={user.pass_msg !== \"\"}>\n              Save\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default connect(({error}) => ({error}))(UsersNew);","import { useLocation } from 'react-router-dom';\nimport { api_tokenauth } from './api';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\n\n// Found in https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript\nfunction getParameterByName(name, search) {\n    var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n        results = regex.exec(search);\n    if (!results) return null;\n    if (!results[2]) return '';\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n\nfunction TwitterAuth({twitter}) {\n\n    let loc = useLocation();\n\n    let search = loc.search;\n    console.log(search);\n\n    let oauth_token = getParameterByName(\"oauth_token\", search);\n    console.log(oauth_token);\n\n    let oauth_verifier = getParameterByName(\"oauth_verifier\", search);\n    console.log(oauth_verifier);\n\n    console.log(twitter.req_token);\n\n    api_tokenauth(oauth_verifier, oauth_token);\n\n    let hist = useHistory();\n\n    hist.push(\"/\");\n\n    return (\n        <div>\n        </div>\n    );\n}\n\nexport default connect(({twitter}) => ({twitter}))(TwitterAuth);","import { Container } from 'react-bootstrap';\nimport { Switch, Route } from 'react-router-dom';\n\nimport \"./App.scss\";\nimport Nav from \"./Nav\";\nimport Feed from './Feed';\nimport UsersList from './Users/List';\nimport UsersNew from './Users/New';\nimport store from './store';\nimport { set_user_cb, set_monster_cb, ch_connect } from './socket';\nimport { connect } from 'react-redux';\nimport { get_twitter_auth } from './api';\nimport TwitterAuth from './twitterauth';\n\nfunction App({session}) {\n  \n  // set socket cb to allow updating users from server through socket\n  set_user_cb((data) => {\n    store.dispatch({\n      type: 'users/set',\n      data: data,\n    })\n  });\n\n  set_monster_cb((data) => {\n    store.dispatch({\n      type: 'monsters/set',\n      data: data,\n    })\n  });\n\n  // if session is saved, connect socket, and get twitter auth url\n  if (session) {\n    ch_connect(session); // TODO: Move if needed?\n    get_twitter_auth();\n  }\n\n  return (\n    <Container>\n      <Nav />\n      <Switch>\n        <Route path=\"/\" exact>\n          <Feed />\n        </Route>\n        <Route path=\"/users\" exact>\n          <UsersList />\n        </Route>\n        <Route path=\"/users/new\">\n          <UsersNew />\n        </Route>\n        <Route path=\"/auth/twitter\">\n          <TwitterAuth />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n\nexport default connect(({session}) => ({session}))(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { load_defaults } from './api';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nload_defaults();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}